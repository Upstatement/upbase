/// Center something (both horizontally & vertically)
/// @param {Number} $dimensions - Width followed by height
/// @link http://codepen.io/upstatement/pen/LVdLOM
/// @link https://css-tricks.com/snippets/sass/centering-mixin/
///
/// @example scss - SCSS
/// .container {
///   position: relative;
/// }
///
/// .item {
///   @include absolute-center();
///   //@include absolute-center("vertical");
///   //@include absolute-center("horizontal");
/// }
///
/// @example css - CSS Output
/// .item {
///   background-color: #bada55;
///   color: white;
///   display: block;
///   padding: 20px;
///   max-width: 500px;
/// }
///
/// .item--both {
///   position: absolute;
///   top: 50%;
///   left: 50%;
///   transform: translate(-50%, -50%);
/// }
///
/// .item--horizontal {
///   position: absolute;
///   left: 50%;
///   transform: translate(-50%, 0);
/// }
///
/// .item--vertical {
///   position: absolute;
///   top: 50%;
///   transform: translate(0, -50%);
/// }
///

@mixin absolute-center($axis: "both") {
  position: absolute;
  @if ($axis == "both") {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  } @else if ($axis == "horizontal") {
    left: 50%;
    transform: translate(-50%, 0);
  } @else if ($axis == "vertical") {
    top: 50%;
    transform: translate(0, -50%);
  }
}

/// Center something (both horizontally & vertically), supporting IE8 and Opera Mini
/// @param {Number} $dimensions - Width followed by height
/// @example scss - SCSS
/// .container {
///   position: relative;
/// }
///
/// .item {
///   @include absolute-center-legacy(100px 100px);
///   //@include absolute-center-legacy(100px n);
/// }
///
/// @example css - CSS Output
/// .item--legacy {
///   position: absolute;
///   width: 100px;
///   margin-left: -50px;
///   left: 50%;
///   height: 100px;
///   margin-top: -50px;
///   top: 50%;
/// }
///
@mixin absolute-center-legacy($dimensions) {
  // If only one value is supplied,
  // default to center the width
  @if length($dimensions) == 1 {
    $dimensions: $dimensions n;
  }

  $width: nth($dimensions, 1);
  $height: nth($dimensions, 2);

  position: absolute;

  @if $width != n {
    @if not(unitless($width)) {
      width: $width;
      margin-left: (-$width / 2);
    }
    @if unitless($width) {
      width: $width + px;
      margin-left: (-$width / 2) + px;
    }
    left: 50%;
  }

  @if $height != n {
    @if not(unitless($height)) {
      height: $height;
      margin-top: (-$height / 2);
    }
    @if unitless($height) {
      height: $height + px;
      margin-top: (-$height / 2) + px;
    }
    top: 50%;
  }
} // absolute-center
